/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MoodImport } from './routes/mood'
import { Route as IndexImport } from './routes/index'
import { Route as EnergyIndexImport } from './routes/energy/index'
import { Route as EnergyChartImport } from './routes/energy/chart'

// Create/Update Routes

const MoodRoute = MoodImport.update({
  id: '/mood',
  path: '/mood',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EnergyIndexRoute = EnergyIndexImport.update({
  id: '/energy/',
  path: '/energy/',
  getParentRoute: () => rootRoute,
} as any)

const EnergyChartRoute = EnergyChartImport.update({
  id: '/energy/chart',
  path: '/energy/chart',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/mood': {
      id: '/mood'
      path: '/mood'
      fullPath: '/mood'
      preLoaderRoute: typeof MoodImport
      parentRoute: typeof rootRoute
    }
    '/energy/chart': {
      id: '/energy/chart'
      path: '/energy/chart'
      fullPath: '/energy/chart'
      preLoaderRoute: typeof EnergyChartImport
      parentRoute: typeof rootRoute
    }
    '/energy/': {
      id: '/energy/'
      path: '/energy'
      fullPath: '/energy'
      preLoaderRoute: typeof EnergyIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/mood': typeof MoodRoute
  '/energy/chart': typeof EnergyChartRoute
  '/energy': typeof EnergyIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/mood': typeof MoodRoute
  '/energy/chart': typeof EnergyChartRoute
  '/energy': typeof EnergyIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/mood': typeof MoodRoute
  '/energy/chart': typeof EnergyChartRoute
  '/energy/': typeof EnergyIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/mood' | '/energy/chart' | '/energy'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/mood' | '/energy/chart' | '/energy'
  id: '__root__' | '/' | '/mood' | '/energy/chart' | '/energy/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MoodRoute: typeof MoodRoute
  EnergyChartRoute: typeof EnergyChartRoute
  EnergyIndexRoute: typeof EnergyIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MoodRoute: MoodRoute,
  EnergyChartRoute: EnergyChartRoute,
  EnergyIndexRoute: EnergyIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/mood",
        "/energy/chart",
        "/energy/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/mood": {
      "filePath": "mood.tsx"
    },
    "/energy/chart": {
      "filePath": "energy/chart.tsx"
    },
    "/energy/": {
      "filePath": "energy/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
